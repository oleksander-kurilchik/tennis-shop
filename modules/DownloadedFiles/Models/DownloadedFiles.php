<?php

namespace TrekSt\Modules\DownloadedFiles\Models;

use Illuminate\Database\Eloquent\Model;
use Storage;
use Carbon\Carbon;
use Str;
use Kyslik\ColumnSortable\Sortable;

class DownloadedFiles extends Model
{
    use Sortable;
    protected $table = 'downloaded_files';
    protected $primaryKey = 'id';
    protected $fillable = ['name', 'description',];
    protected static $disk = 'downloaded_files';


    public function addFile($file, $name = 'file')
    {

        $file_name = "";
        $name_hash = md5(Carbon::now()->toDateTimeString());
        $name_ext = $file->getClientOriginalExtension();
        $name_title = mb_substr(mb_strtolower(Str::slug($name)), 0,
            250 - strlen("_" . $name_hash . "." . $name_ext));

        $file_name = $name_title . "_" . $name_hash . "." . $name_ext;

        $disk = Storage::disk(self::$disk);
        $disk_path = $disk->getAdapter()->getPathPrefix();
        $file->move($disk_path . '/', $file_name);
        $this->file_name = $file_name;
        $this->file_size = $file->getSize();

    }

    public function updateFile($file)
    {
        $this->deleteCurrentFile();
        $this->addFile($file, $this->name);
    }

    public function fullPathFile()
    {
        return Storage::disk(self::$disk)->url($this->file_name);
    }

    public function delete()
    {
        $this->deleteCurrentFile();
        return parent::delete(); // TODO: Change the autogenerated stub
    }

    protected function deleteCurrentFile()
    {
        $disk = Storage::disk(self::$disk);
        if ($disk->exists($this->file_name) && !empty($this->file_name)) {
            $disk->delete($this->file_name);
        }
    }

    public function getUrlAttribute()
    {
        return Storage::disk(self::$disk)->url($this->file_name);
    }

    public function getSizeAttribute()
    {
        if ($this->file_size > 1024 * 1024) {
            return round($this->file_size / 1024 * 1024, 2) . " MB";
        }

        if ($this->file_size > 1024) {
            return round($this->file_size / 1024, 2) . " KB";
        }
        return ($this->file_size) . " B";
    }
}
