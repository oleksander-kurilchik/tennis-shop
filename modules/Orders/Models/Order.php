<?php

namespace TrekSt\Modules\Orders\Models;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use TrekSt\Modules\Currencies\Models\Currency;
use \TrekSt\Modules\FrontendUsers\Models\FrontendUser as User;
 use Auth;
use TrekSt\Modules\Orders\Presenters\Frontend\OrderPresenter;

class Order extends Model
{
    public const  NEW_ORDER = 'new_order';
    public const  BEING_PROCESSED = 'being_processed';
    public const  CANCELED = 'canceled';
    public const  CONFIRMED = 'confirmed';
    public const  PAID = 'paid';
    public const  COMPLETED = 'complete';
    public const  RETURNED_FOR_REVISION = 'returned_for_revision';







    protected $with = ['prices', 'currency'];

    protected $table = 'orders';

    /**
     * The database primary key value.
     *
     * @var string
     */
    protected $primaryKey = 'id';

    public function products()
    {
        return $this->hasMany(OrdersProduct::class, 'orders_id');
    }

    protected $fillable = [
        'first_name',
        'last_name',
        'email',
        'phone',
        'address',
        'city',
        'manager',
        'manager_id',
        'payment_method',
        'user_message',
        'order_description',
        'currency_id',
        'users_id',
        'not_call_me'
    ];

    public function user()
    {
        return $this->belongsTo(User::class, 'users_id');
    }

    public function prices()
    {
        return $this->hasMany(OrdersPrice::class, 'orders_id')->orderBy('currency_id');
    }

    public function price()
    {
       $relation =  $this->hasOne(OrdersPrice::class, 'orders_id');
       $relation->getQuery()->join('orders','orders.currency_id', '=' , 'order_price.currency_id' );
       return $relation;
     }


    public function delivery()
    {
        return $this->hasOne(OrdersDelivery::class, 'orders_id')->withDefault(['delivery_method'=>0]);
    }

    public function currency()
    {
        return $this->belongsTo(Currency::class, 'currency_id')->withDefault(['course' => 1]);
    }


    public static function getStatusesForSelect()
    {
        return [
            self::NEW_ORDER => trans('order.status.' . self::NEW_ORDER),
            self::BEING_PROCESSED => trans('order.status.' . self::BEING_PROCESSED),
            self::CANCELED => trans('order.status.' . self::CANCELED),
            self::CONFIRMED => trans('order.status.' . self::CONFIRMED),
            self::PAID => trans('order.status.' . self::PAID),
            self::COMPLETED => trans('order.status.' . self::COMPLETED),
            self::RETURNED_FOR_REVISION => trans('order.status.' . self::RETURNED_FOR_REVISION),
        ];
    }

    public function getStatusTextAttribute()
    {
        return trans('order.status.' . $this->status);
    }


    public static function getAllForSelect()
    {
        $list = static::all()->mapWithKeys(function ($item) {
            return [$item->id => $item->name];
        });
        return $list;
    }


    public function services()
    {
        return $this->hasMany(OrdersService::class, 'orders_id');
    }
    public function canEdit()
    {
        return $this->status == self::BEING_PROCESSED;
    }

//    public function fillFromAdmin()
//    {
//        $this->date_order = Carbon::now();
//        $this->ip = '0.0.0.0';
//        $this->user_agent = 'Administrator: ' . Auth::guard('backend')->user()->email;
//        $this->order_status = Order::BEING_PROCESSED;
//        $this->total_count = 0;
//    }

    public function delete()
    {
        foreach ($this->products as $product){
            $product->delete();
        }
        $this->delivery()->delete();
        $this->services()->delete();
        $this->prices()->delete();

        return parent::delete(); // TODO: Change the autogenerated stub
    }


    public function scopeManagerFilter($query){
    /*    $user = \Auth::guard('backend')->user();
        if(!$user->super_user){
            $query->whereIn('orders.users_id',function ($query)use ($user){
                $query->select(\DB::raw("frontend_users.id from frontend_users WHERE frontend_users.regions_id in
                                                   (SELECT regions_id FROM `backend_users_regions_pivot` WHERE backend_users_regions_pivot.users_id = {$user->id}) "));

            });

        }
        return $query;*/
    }


    public function getFrontAttribute(){
        if(!$this->frontendAttr){
            $this->frontendAttr = new OrderPresenter($this);
        }
        return  $this->frontendAttr;
    }


}
